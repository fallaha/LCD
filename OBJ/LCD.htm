<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\OBJ\LCD.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\OBJ\LCD.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Mon Sep 19 11:31:53 2016
<BR><P>
<H3>Maximum Stack Usage =        296 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; AF_LCD::printf(const char*, ...) &rArr; AF_LCD::ShowString(char*) &rArr; AF_LCD::ShowChar(char) &rArr; AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short) &rArr; AF_LCD::SetCursor(unsigned char, unsigned short) &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[23]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[e]">TIMER0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">UART0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[32]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[33]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[35]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[8a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[36]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[8c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[90]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[91]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[92]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[93]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[94]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[95]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[96]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[98]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[99]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[a3]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[a4]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[a5]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[a6]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[a7]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[34]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[a8]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[37]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a9]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; AF_LCD::printf(const char*, ...) &rArr; AF_LCD::ShowString(char*) &rArr; AF_LCD::ShowChar(char) &rArr; AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short) &rArr; AF_LCD::SetCursor(unsigned char, unsigned short) &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[80]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[ab]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[40]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[58]"></a>wait()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, af_lcd.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_only(unsigned short)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_dat(unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_cmd(unsigned char)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ac]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 306 bytes, Stack size 0 bytes, system_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>main</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = main &rArr; AF_LCD::printf(const char*, ...) &rArr; AF_LCD::ShowString(char*) &rArr; AF_LCD::ShowChar(char) &rArr; AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short) &rArr; AF_LCD::SetCursor(unsigned char, unsigned short) &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_FLCD::ShowString(char*)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::printf(const char*, ...)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Clear(unsigned short)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Init()
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::SetTextColor(unsigned short)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::SetBackColor(unsigned short)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::getchar3()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::getchar2()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::getchar1()
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::getchar0()
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::AF_LCD()
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::UART(signed char, int)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[86]"></a>UART::uart0_init()</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::UART(signed char, int)
</UL>

<P><STRONG><a name="[87]"></a>UART::uart1_init()</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::UART(signed char, int)
</UL>

<P><STRONG><a name="[88]"></a>UART::uart2_init()</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::UART(signed char, int)
</UL>

<P><STRONG><a name="[89]"></a>UART::uart3_init()</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::UART(signed char, int)
</UL>

<P><STRONG><a name="[4b]"></a>UART::getchar0()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>UART::getchar1()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>UART::getchar2()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>UART::getchar3()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>UART::sendchar0(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::sendchar(unsigned char)
</UL>

<P><STRONG><a name="[82]"></a>UART::sendchar1(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::sendchar(unsigned char)
</UL>

<P><STRONG><a name="[83]"></a>UART::sendchar2(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::sendchar(unsigned char)
</UL>

<P><STRONG><a name="[84]"></a>UART::sendchar3(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::sendchar(unsigned char)
</UL>

<P><STRONG><a name="[4f]"></a>UART::printf(const char*, ...)</STRONG> (Thumb, 230 bytes, Stack size 104 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen(const char*)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy(char*, const char*)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa_s(int, unsigned, char*)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::sendchar(unsigned char)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::sendstring(char*)
</UL>

<P><STRONG><a name="[85]"></a>CPU::GetCpuClk()</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, af_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CPU::GetCpuClk()
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::UART(signed char, int)
</UL>

<P><STRONG><a name="[56]"></a>itoa(unsigned, unsigned, char*)</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, af_string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = itoa(unsigned, unsigned, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa_s(int, unsigned, char*)
</UL>

<P><STRONG><a name="[54]"></a>itoa_s(int, unsigned, char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, af_string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = itoa_s(int, unsigned, char*) &rArr; itoa(unsigned, unsigned, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa(unsigned, unsigned, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::printf(const char*, ...)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::printf(const char*, ...)
</UL>

<P><STRONG><a name="[51]"></a>strcpy(char*, const char*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, af_string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcpy(char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::printf(const char*, ...)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::printf(const char*, ...)
</UL>

<P><STRONG><a name="[55]"></a>strlen(const char*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, af_string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::printf(const char*, ...)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::printf(const char*, ...)
</UL>

<P><STRONG><a name="[ad]"></a>memcpy(void*, const void*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, af_string.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>memset(void*, char, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, af_string.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>memsetw(unsigned short*, unsigned short, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, af_string.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>GetExtendedIndex_roya(unsigned short, const FONTHEADER_BFC*)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetExtendedIndex_roya(unsigned short, const FONTHEADER_BFC*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_FLCD::recycle(char*)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_FLCD::ShowString(char*)
</UL>

<P><STRONG><a name="[b0]"></a>GetX()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, af_lcd.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>GetY()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, af_lcd.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>AF_LCD::wait_delay(int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, af_lcd.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>AF_LCD::delay(int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, af_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::rd_dat()
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Init()
</UL>

<P><STRONG><a name="[77]"></a>AF_LCD::mypow(unsigned char, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Show2Num(unsigned char, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowNum(unsigned char, unsigned short, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[5b]"></a>AF_LCD::SetCursor(unsigned char, unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AF_LCD::SetCursor(unsigned char, unsigned short) &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_reg(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_FLCD::ShowCharF(unsigned short, unsigned short, unsigned char)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::write_pic_fast(const unsigned short*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Fill(unsigned char, unsigned short, unsigned char, unsigned short, unsigned short)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bargraph(unsigned, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawChar(unsigned, unsigned, unsigned short*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::PutPixel(unsigned, unsigned)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowChar(char)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint(unsigned short, unsigned short)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Clear(unsigned short)
</UL>

<P><STRONG><a name="[5d]"></a>AF_LCD::WindowMax()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AF_LCD::WindowMax() &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_reg(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::write_pic_fast(const unsigned short*)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ClearLn(unsigned)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DisplayString(unsigned, unsigned, unsigned char*)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint(unsigned short, unsigned short)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Clear(unsigned short)
</UL>

<P><STRONG><a name="[5e]"></a>AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short) &rArr; AF_LCD::SetCursor(unsigned char, unsigned short) &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_start()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_stop()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_only(unsigned short)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::WindowMax()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::SetCursor(unsigned char, unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_FLCD::ShowCharF(unsigned short, unsigned short, unsigned char)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowChar(char)
</UL>

<P><STRONG><a name="[62]"></a>AF_LCD::WriteRAM_Prepare()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AF_LCD::WriteRAM_Prepare() &rArr; [local to AF_LCD_cpp]::wr_cmd(unsigned char) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_FLCD::ShowCharF(unsigned short, unsigned short, unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Fill(unsigned char, unsigned short, unsigned char, unsigned short, unsigned short)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowChar(char)
</UL>

<P><STRONG><a name="[63]"></a>AF_LCD::rd_reg(unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AF_LCD::rd_reg(unsigned short) &rArr; [local to AF_LCD_cpp]::wr_cmd(unsigned char) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::rd_dat()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Init()
</UL>

<P><STRONG><a name="[67]"></a>AF_LCD::changeXY()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, af_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowChar(char)
</UL>

<P><STRONG><a name="[65]"></a>AF_LCD::DrawPoint(unsigned short, unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AF_LCD::DrawPoint(unsigned short, unsigned short) &rArr; AF_LCD::SetCursor(unsigned char, unsigned short) &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_start()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_stop()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_only(unsigned short)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::WindowMax()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::SetCursor(unsigned char, unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Draw_Circle(unsigned char, unsigned short, unsigned char)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawLine(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowChar(char)
</UL>

<P><STRONG><a name="[66]"></a>AF_LCD::ShowChar(char)</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AF_LCD::ShowChar(char) &rArr; AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short) &rArr; AF_LCD::SetCursor(unsigned char, unsigned short) &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_reg(unsigned char, unsigned short)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint(unsigned short, unsigned short)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::changeXY()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::WriteRAM_Prepare()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::SetCursor(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Show2Num(unsigned char, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowNum(unsigned char, unsigned short, unsigned, unsigned char, unsigned char)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowString(char*)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::printf(const char*, ...)
</UL>

<P><STRONG><a name="[46]"></a>AF_LCD::Clear(unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AF_LCD::Clear(unsigned short) &rArr; AF_LCD::SetCursor(unsigned char, unsigned short) &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_start()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_stop()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_only(unsigned short)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::WindowMax()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::SetCursor(unsigned char, unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_FLCD::ShowCharF(unsigned short, unsigned short, unsigned char)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowString(char*)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>AF_LCD::ShowString(char*)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AF_LCD::ShowString(char*) &rArr; AF_LCD::ShowChar(char) &rArr; AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short) &rArr; AF_LCD::SetCursor(unsigned char, unsigned short) &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowChar(char)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Clear(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::printf(const char*, ...)
</UL>

<P><STRONG><a name="[49]"></a>AF_LCD::printf(const char*, ...)</STRONG> (Thumb, 230 bytes, Stack size 104 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AF_LCD::printf(const char*, ...) &rArr; AF_LCD::ShowString(char*) &rArr; AF_LCD::ShowChar(char) &rArr; AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short) &rArr; AF_LCD::SetCursor(unsigned char, unsigned short) &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowString(char*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowChar(char)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen(const char*)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy(char*, const char*)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa_s(int, unsigned, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>AF_LCD::Init()</STRONG> (Thumb, 1754 bytes, Stack size 8 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AF_LCD::Init() &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_reg(unsigned char, unsigned short)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::rd_reg(unsigned short)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::delay(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::AF_LCD()
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>AF_LCD::PutPixel(unsigned, unsigned)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::SetCursor(unsigned char, unsigned short)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_dat(unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::write_pic(int, int, const unsigned short*)
</UL>

<P><STRONG><a name="[48]"></a>AF_LCD::SetTextColor(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, af_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::write_pic(int, int, const unsigned short*)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>AF_LCD::SetBackColor(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, af_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>AF_LCD::DrawChar(unsigned, unsigned, unsigned short*)</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_reg(unsigned char, unsigned short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_start()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_stop()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_only(unsigned short)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::SetCursor(unsigned char, unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DisplayChar(unsigned, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[6c]"></a>AF_LCD::DisplayChar(unsigned, unsigned, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawChar(unsigned, unsigned, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DisplayString(unsigned, unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[6d]"></a>AF_LCD::DisplayString(unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DisplayChar(unsigned, unsigned, unsigned char)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::WindowMax()
</UL>

<P><STRONG><a name="[6e]"></a>AF_LCD::ClearLn(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::WindowMax()
</UL>

<P><STRONG><a name="[6f]"></a>AF_LCD::Bargraph(unsigned, unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_reg(unsigned char, unsigned short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_start()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_stop()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_only(unsigned short)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::SetCursor(unsigned char, unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_cmd(unsigned char)
</UL>

<P><STRONG><a name="[70]"></a>AF_LCD::Bitmap(unsigned, unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_reg(unsigned char, unsigned short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_start()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_stop()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_only(unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_cmd(unsigned char)
</UL>

<P><STRONG><a name="[71]"></a>AF_LCD::Bmp(unsigned, unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_reg(unsigned char, unsigned short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_start()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_stop()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_only(unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_cmd(unsigned char)
</UL>

<P><STRONG><a name="[72]"></a>AF_LCD::Fill(unsigned char, unsigned short, unsigned char, unsigned short, unsigned short)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_reg(unsigned char, unsigned short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_start()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_only(unsigned short)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::WriteRAM_Prepare()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::SetCursor(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[73]"></a>AF_LCD::DrawLine(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawRectangle(unsigned char, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[74]"></a>AF_LCD::DrawRectangle(unsigned char, unsigned short, unsigned char, unsigned short)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawLine(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[75]"></a>AF_LCD::Draw_Circle(unsigned char, unsigned short, unsigned char)</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[76]"></a>AF_LCD::ShowNum(unsigned char, unsigned short, unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowChar(char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::mypow(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[78]"></a>AF_LCD::Show2Num(unsigned char, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowChar(char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::mypow(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[79]"></a>AF_LCD::write_pic(int, int, const unsigned short*)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::PutPixel(unsigned, unsigned)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::SetTextColor(unsigned short)
</UL>

<P><STRONG><a name="[7a]"></a>AF_LCD::write_pic_fast(const unsigned short*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_start()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_stop()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_only(unsigned short)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::WindowMax()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::SetCursor(unsigned char, unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_cmd(unsigned char)
</UL>

<P><STRONG><a name="[7b]"></a>AF_FLCD::ShowCharF(unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AF_FLCD::ShowCharF(unsigned short, unsigned short, unsigned char) &rArr; AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short) &rArr; AF_LCD::SetCursor(unsigned char, unsigned short) &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_reg(unsigned char, unsigned short)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::WriteRAM_Prepare()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::SetCursor(unsigned char, unsigned short)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Clear(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_FLCD::recycle(char*)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_FLCD::ShowString(char*)
</UL>

<P><STRONG><a name="[4a]"></a>AF_FLCD::ShowString(char*)</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AF_FLCD::ShowString(char*) &rArr; AF_FLCD::ShowCharF(unsigned short, unsigned short, unsigned char) &rArr; AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short) &rArr; AF_LCD::SetCursor(unsigned char, unsigned short) &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_FLCD::ShowCharF(unsigned short, unsigned short, unsigned char)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExtendedIndex_roya(unsigned short, const FONTHEADER_BFC*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>AF_FLCD::changeXY()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, af_lcd.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>AF_FLCD::recycle(char*)</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, af_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_FLCD::recycle(char*)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_FLCD::ShowCharF(unsigned short, unsigned short, unsigned char)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExtendedIndex_roya(unsigned short, const FONTHEADER_BFC*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_FLCD::recycle(char*)
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::printf(const char*, ...)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::printf(const char*, ...)
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3d]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bd]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[be]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[bf]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>UART::sendstring(char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart.o(i._ZN4UART10sendstringEPc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::sendchar(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::printf(const char*, ...)
</UL>

<P><STRONG><a name="[c1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>UART::sendchar(unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, uart.o(i._ZN4UART8sendcharEh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::sendchar3(unsigned char)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::sendchar2(unsigned char)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::sendchar1(unsigned char)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::sendchar0(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::sendstring(char*)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::printf(const char*, ...)
</UL>

<P><STRONG><a name="[43]"></a>UART::UART(signed char, int)</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, main.o(i._ZN4UARTC1Eai))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART::UART(signed char, int) &rArr; CPU::GetCpuClk()
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::uart3_init()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::uart2_init()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::uart1_init()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART::uart0_init()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU::GetCpuClk()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>UART::UART__sub_object(signed char, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, main.o(i._ZN4UARTC1Eai), UNUSED)

<P><STRONG><a name="[60]"></a>AF_LCD::wr_dat_only(unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, af_lcd.o(i._ZN6AF_LCD11wr_dat_onlyEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AF_LCD::wr_dat_only(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::write_pic_fast(const unsigned short*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Fill(unsigned char, unsigned short, unsigned char, unsigned short, unsigned short)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bmp(unsigned, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bitmap(unsigned, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bargraph(unsigned, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawChar(unsigned, unsigned, unsigned short*)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint(unsigned short, unsigned short)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Clear(unsigned short)
</UL>

<P><STRONG><a name="[61]"></a>AF_LCD::wr_dat_stop()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, af_lcd.o(i._ZN6AF_LCD11wr_dat_stopEv))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::write_pic_fast(const unsigned short*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bmp(unsigned, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bitmap(unsigned, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bargraph(unsigned, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawChar(unsigned, unsigned, unsigned short*)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint(unsigned short, unsigned short)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Clear(unsigned short)
</UL>

<P><STRONG><a name="[5f]"></a>AF_LCD::wr_dat_start()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, af_lcd.o(i._ZN6AF_LCD12wr_dat_startEv))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::write_pic_fast(const unsigned short*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Fill(unsigned char, unsigned short, unsigned char, unsigned short, unsigned short)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bmp(unsigned, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bitmap(unsigned, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bargraph(unsigned, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawChar(unsigned, unsigned, unsigned short*)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint(unsigned short, unsigned short)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Clear(unsigned short)
</UL>

<P><STRONG><a name="[64]"></a>AF_LCD::rd_dat()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, af_lcd.o(i._ZN6AF_LCD6rd_datEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AF_LCD::rd_dat()
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::delay(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::rd_reg(unsigned short)
</UL>

<P><STRONG><a name="[5c]"></a>AF_LCD::wr_reg(unsigned char, unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, af_lcd.o(i._ZN6AF_LCD6wr_regEht))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_dat(unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_cmd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_FLCD::ShowCharF(unsigned short, unsigned short, unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Fill(unsigned char, unsigned short, unsigned char, unsigned short, unsigned short)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bmp(unsigned, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bitmap(unsigned, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bargraph(unsigned, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawChar(unsigned, unsigned, unsigned short*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::ShowChar(char)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::WindowMax()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::SetCursor(unsigned char, unsigned short)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Init()
</UL>

<P><STRONG><a name="[44]"></a>AF_LCD::AF_LCD()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i._ZN6AF_LCDC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AF_LCD::AF_LCD() &rArr; AF_LCD::Init() &rArr; AF_LCD::wr_reg(unsigned char, unsigned short) &rArr; [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>AF_LCD::AF_LCD__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN6AF_LCDC1Ev), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[57]"></a>[local to AF_LCD_cpp]::lcd_send(unsigned short)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait()
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_dat_only(unsigned short)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_dat(unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::wr_cmd(unsigned char)
</UL>

<P><STRONG><a name="[59]"></a>[local to AF_LCD_cpp]::wr_cmd(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to AF_LCD_cpp]::wr_cmd(unsigned char) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_reg(unsigned char, unsigned short)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::write_pic_fast(const unsigned short*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bmp(unsigned, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bitmap(unsigned, unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Bargraph(unsigned, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawChar(unsigned, unsigned, unsigned short*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::PutPixel(unsigned, unsigned)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint(unsigned short, unsigned short)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::rd_reg(unsigned short)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::WriteRAM_Prepare()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::DrawPoint1(unsigned short, unsigned short, unsigned short)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::Clear(unsigned short)
</UL>

<P><STRONG><a name="[5a]"></a>[local to AF_LCD_cpp]::wr_dat(unsigned short)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, af_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to AF_LCD_cpp]::wr_dat(unsigned short) &rArr; [local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AF_LCD_cpp]::lcd_send(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::wr_reg(unsigned char, unsigned short)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AF_LCD::PutPixel(unsigned, unsigned)
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
